
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model TestRecord
 * 
 */
export type TestRecord = $Result.DefaultSelection<Prisma.$TestRecordPayload>
/**
 * Model PerformanceAnalysis
 * 
 */
export type PerformanceAnalysis = $Result.DefaultSelection<Prisma.$PerformanceAnalysisPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Difficulty: {
  Easy: 'Easy',
  Medium: 'Medium',
  Hard: 'Hard'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]

}

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testRecord`: Exposes CRUD operations for the **TestRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestRecords
    * const testRecords = await prisma.testRecord.findMany()
    * ```
    */
  get testRecord(): Prisma.TestRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.performanceAnalysis`: Exposes CRUD operations for the **PerformanceAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformanceAnalyses
    * const performanceAnalyses = await prisma.performanceAnalysis.findMany()
    * ```
    */
  get performanceAnalysis(): Prisma.PerformanceAnalysisDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Question: 'Question',
    TestRecord: 'TestRecord',
    PerformanceAnalysis: 'PerformanceAnalysis'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "question" | "testRecord" | "performanceAnalysis"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      TestRecord: {
        payload: Prisma.$TestRecordPayload<ExtArgs>
        fields: Prisma.TestRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          findFirst: {
            args: Prisma.TestRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          findMany: {
            args: Prisma.TestRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>[]
          }
          create: {
            args: Prisma.TestRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          createMany: {
            args: Prisma.TestRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TestRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          update: {
            args: Prisma.TestRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          deleteMany: {
            args: Prisma.TestRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TestRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestRecordPayload>
          }
          aggregate: {
            args: Prisma.TestRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestRecord>
          }
          groupBy: {
            args: Prisma.TestRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestRecordCountArgs<ExtArgs>
            result: $Utils.Optional<TestRecordCountAggregateOutputType> | number
          }
        }
      }
      PerformanceAnalysis: {
        payload: Prisma.$PerformanceAnalysisPayload<ExtArgs>
        fields: Prisma.PerformanceAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformanceAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformanceAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          findFirst: {
            args: Prisma.PerformanceAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformanceAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          findMany: {
            args: Prisma.PerformanceAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>[]
          }
          create: {
            args: Prisma.PerformanceAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          createMany: {
            args: Prisma.PerformanceAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PerformanceAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          update: {
            args: Prisma.PerformanceAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.PerformanceAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformanceAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PerformanceAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformanceAnalysisPayload>
          }
          aggregate: {
            args: Prisma.PerformanceAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformanceAnalysis>
          }
          groupBy: {
            args: Prisma.PerformanceAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformanceAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformanceAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<PerformanceAnalysisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    question?: QuestionOmit
    testRecord?: TestRecordOmit
    performanceAnalysis?: PerformanceAnalysisOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    testRecords: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testRecords?: boolean | UserCountOutputTypeCountTestRecordsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTestRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestRecordWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    testRecords: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testRecords?: boolean | QuestionCountOutputTypeCountTestRecordsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountTestRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestRecordWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    image: string | null
    provider: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password_hash: string | null
    image: string | null
    provider: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password_hash: number
    image: number
    provider: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    image?: true
    provider?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    image?: true
    provider?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    image?: true
    provider?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string | null
    email: string
    password_hash: string | null
    image: string | null
    provider: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    image?: boolean
    provider?: boolean
    createdAt?: boolean
    testRecords?: boolean | User$testRecordsArgs<ExtArgs>
    performanceAnalysis?: boolean | User$performanceAnalysisArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    image?: boolean
    provider?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password_hash" | "image" | "provider" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testRecords?: boolean | User$testRecordsArgs<ExtArgs>
    performanceAnalysis?: boolean | User$performanceAnalysisArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      testRecords: Prisma.$TestRecordPayload<ExtArgs>[]
      performanceAnalysis: Prisma.$PerformanceAnalysisPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      email: string
      password_hash: string | null
      image: string | null
      provider: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    testRecords<T extends User$testRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$testRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    performanceAnalysis<T extends User$performanceAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, User$performanceAnalysisArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly provider: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.testRecords
   */
  export type User$testRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    where?: TestRecordWhereInput
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    cursor?: TestRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestRecordScalarFieldEnum | TestRecordScalarFieldEnum[]
  }

  /**
   * User.performanceAnalysis
   */
  export type User$performanceAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    where?: PerformanceAnalysisWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    question_id: number | null
  }

  export type QuestionSumAggregateOutputType = {
    question_id: number | null
  }

  export type QuestionMinAggregateOutputType = {
    question_id: number | null
    subject: string | null
    topic: string | null
    difficulty: $Enums.Difficulty | null
    question_text: string | null
    correct_option: string | null
    option_1: string | null
    option_2: string | null
    option_3: string | null
    option_4: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    question_id: number | null
    subject: string | null
    topic: string | null
    difficulty: $Enums.Difficulty | null
    question_text: string | null
    correct_option: string | null
    option_1: string | null
    option_2: string | null
    option_3: string | null
    option_4: string | null
  }

  export type QuestionCountAggregateOutputType = {
    question_id: number
    subject: number
    topic: number
    difficulty: number
    question_text: number
    correct_option: number
    option_1: number
    option_2: number
    option_3: number
    option_4: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    question_id?: true
  }

  export type QuestionSumAggregateInputType = {
    question_id?: true
  }

  export type QuestionMinAggregateInputType = {
    question_id?: true
    subject?: true
    topic?: true
    difficulty?: true
    question_text?: true
    correct_option?: true
    option_1?: true
    option_2?: true
    option_3?: true
    option_4?: true
  }

  export type QuestionMaxAggregateInputType = {
    question_id?: true
    subject?: true
    topic?: true
    difficulty?: true
    question_text?: true
    correct_option?: true
    option_1?: true
    option_2?: true
    option_3?: true
    option_4?: true
  }

  export type QuestionCountAggregateInputType = {
    question_id?: true
    subject?: true
    topic?: true
    difficulty?: true
    question_text?: true
    correct_option?: true
    option_1?: true
    option_2?: true
    option_3?: true
    option_4?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    question_id: number
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    question_id?: boolean
    subject?: boolean
    topic?: boolean
    difficulty?: boolean
    question_text?: boolean
    correct_option?: boolean
    option_1?: boolean
    option_2?: boolean
    option_3?: boolean
    option_4?: boolean
    testRecords?: boolean | Question$testRecordsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>



  export type QuestionSelectScalar = {
    question_id?: boolean
    subject?: boolean
    topic?: boolean
    difficulty?: boolean
    question_text?: boolean
    correct_option?: boolean
    option_1?: boolean
    option_2?: boolean
    option_3?: boolean
    option_4?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"question_id" | "subject" | "topic" | "difficulty" | "question_text" | "correct_option" | "option_1" | "option_2" | "option_3" | "option_4", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testRecords?: boolean | Question$testRecordsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      testRecords: Prisma.$TestRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      question_id: number
      subject: string
      topic: string
      difficulty: $Enums.Difficulty
      question_text: string
      correct_option: string
      option_1: string
      option_2: string
      option_3: string
      option_4: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `question_id`
     * const questionWithQuestion_idOnly = await prisma.question.findMany({ select: { question_id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    testRecords<T extends Question$testRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Question$testRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly question_id: FieldRef<"Question", 'Int'>
    readonly subject: FieldRef<"Question", 'String'>
    readonly topic: FieldRef<"Question", 'String'>
    readonly difficulty: FieldRef<"Question", 'Difficulty'>
    readonly question_text: FieldRef<"Question", 'String'>
    readonly correct_option: FieldRef<"Question", 'String'>
    readonly option_1: FieldRef<"Question", 'String'>
    readonly option_2: FieldRef<"Question", 'String'>
    readonly option_3: FieldRef<"Question", 'String'>
    readonly option_4: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.testRecords
   */
  export type Question$testRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    where?: TestRecordWhereInput
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    cursor?: TestRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestRecordScalarFieldEnum | TestRecordScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model TestRecord
   */

  export type AggregateTestRecord = {
    _count: TestRecordCountAggregateOutputType | null
    _avg: TestRecordAvgAggregateOutputType | null
    _sum: TestRecordSumAggregateOutputType | null
    _min: TestRecordMinAggregateOutputType | null
    _max: TestRecordMaxAggregateOutputType | null
  }

  export type TestRecordAvgAggregateOutputType = {
    attempt_id: number | null
    user_id: number | null
    question_id: number | null
    time_taken: number | null
  }

  export type TestRecordSumAggregateOutputType = {
    attempt_id: number | null
    user_id: number | null
    question_id: number | null
    time_taken: number | null
  }

  export type TestRecordMinAggregateOutputType = {
    attempt_id: number | null
    user_id: number | null
    question_id: number | null
    selected_option: string | null
    correct: boolean | null
    time_taken: number | null
    test_date: Date | null
  }

  export type TestRecordMaxAggregateOutputType = {
    attempt_id: number | null
    user_id: number | null
    question_id: number | null
    selected_option: string | null
    correct: boolean | null
    time_taken: number | null
    test_date: Date | null
  }

  export type TestRecordCountAggregateOutputType = {
    attempt_id: number
    user_id: number
    question_id: number
    selected_option: number
    correct: number
    time_taken: number
    test_date: number
    _all: number
  }


  export type TestRecordAvgAggregateInputType = {
    attempt_id?: true
    user_id?: true
    question_id?: true
    time_taken?: true
  }

  export type TestRecordSumAggregateInputType = {
    attempt_id?: true
    user_id?: true
    question_id?: true
    time_taken?: true
  }

  export type TestRecordMinAggregateInputType = {
    attempt_id?: true
    user_id?: true
    question_id?: true
    selected_option?: true
    correct?: true
    time_taken?: true
    test_date?: true
  }

  export type TestRecordMaxAggregateInputType = {
    attempt_id?: true
    user_id?: true
    question_id?: true
    selected_option?: true
    correct?: true
    time_taken?: true
    test_date?: true
  }

  export type TestRecordCountAggregateInputType = {
    attempt_id?: true
    user_id?: true
    question_id?: true
    selected_option?: true
    correct?: true
    time_taken?: true
    test_date?: true
    _all?: true
  }

  export type TestRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestRecord to aggregate.
     */
    where?: TestRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestRecords to fetch.
     */
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestRecords
    **/
    _count?: true | TestRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestRecordMaxAggregateInputType
  }

  export type GetTestRecordAggregateType<T extends TestRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateTestRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestRecord[P]>
      : GetScalarType<T[P], AggregateTestRecord[P]>
  }




  export type TestRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestRecordWhereInput
    orderBy?: TestRecordOrderByWithAggregationInput | TestRecordOrderByWithAggregationInput[]
    by: TestRecordScalarFieldEnum[] | TestRecordScalarFieldEnum
    having?: TestRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestRecordCountAggregateInputType | true
    _avg?: TestRecordAvgAggregateInputType
    _sum?: TestRecordSumAggregateInputType
    _min?: TestRecordMinAggregateInputType
    _max?: TestRecordMaxAggregateInputType
  }

  export type TestRecordGroupByOutputType = {
    attempt_id: number
    user_id: number
    question_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date: Date
    _count: TestRecordCountAggregateOutputType | null
    _avg: TestRecordAvgAggregateOutputType | null
    _sum: TestRecordSumAggregateOutputType | null
    _min: TestRecordMinAggregateOutputType | null
    _max: TestRecordMaxAggregateOutputType | null
  }

  type GetTestRecordGroupByPayload<T extends TestRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestRecordGroupByOutputType[P]>
            : GetScalarType<T[P], TestRecordGroupByOutputType[P]>
        }
      >
    >


  export type TestRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    attempt_id?: boolean
    user_id?: boolean
    question_id?: boolean
    selected_option?: boolean
    correct?: boolean
    time_taken?: boolean
    test_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testRecord"]>



  export type TestRecordSelectScalar = {
    attempt_id?: boolean
    user_id?: boolean
    question_id?: boolean
    selected_option?: boolean
    correct?: boolean
    time_taken?: boolean
    test_date?: boolean
  }

  export type TestRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"attempt_id" | "user_id" | "question_id" | "selected_option" | "correct" | "time_taken" | "test_date", ExtArgs["result"]["testRecord"]>
  export type TestRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $TestRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      attempt_id: number
      user_id: number
      question_id: number
      selected_option: string
      correct: boolean
      time_taken: number
      test_date: Date
    }, ExtArgs["result"]["testRecord"]>
    composites: {}
  }

  type TestRecordGetPayload<S extends boolean | null | undefined | TestRecordDefaultArgs> = $Result.GetResult<Prisma.$TestRecordPayload, S>

  type TestRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestRecordCountAggregateInputType | true
    }

  export interface TestRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestRecord'], meta: { name: 'TestRecord' } }
    /**
     * Find zero or one TestRecord that matches the filter.
     * @param {TestRecordFindUniqueArgs} args - Arguments to find a TestRecord
     * @example
     * // Get one TestRecord
     * const testRecord = await prisma.testRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestRecordFindUniqueArgs>(args: SelectSubset<T, TestRecordFindUniqueArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestRecordFindUniqueOrThrowArgs} args - Arguments to find a TestRecord
     * @example
     * // Get one TestRecord
     * const testRecord = await prisma.testRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, TestRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordFindFirstArgs} args - Arguments to find a TestRecord
     * @example
     * // Get one TestRecord
     * const testRecord = await prisma.testRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestRecordFindFirstArgs>(args?: SelectSubset<T, TestRecordFindFirstArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordFindFirstOrThrowArgs} args - Arguments to find a TestRecord
     * @example
     * // Get one TestRecord
     * const testRecord = await prisma.testRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, TestRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestRecords
     * const testRecords = await prisma.testRecord.findMany()
     * 
     * // Get first 10 TestRecords
     * const testRecords = await prisma.testRecord.findMany({ take: 10 })
     * 
     * // Only select the `attempt_id`
     * const testRecordWithAttempt_idOnly = await prisma.testRecord.findMany({ select: { attempt_id: true } })
     * 
     */
    findMany<T extends TestRecordFindManyArgs>(args?: SelectSubset<T, TestRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestRecord.
     * @param {TestRecordCreateArgs} args - Arguments to create a TestRecord.
     * @example
     * // Create one TestRecord
     * const TestRecord = await prisma.testRecord.create({
     *   data: {
     *     // ... data to create a TestRecord
     *   }
     * })
     * 
     */
    create<T extends TestRecordCreateArgs>(args: SelectSubset<T, TestRecordCreateArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestRecords.
     * @param {TestRecordCreateManyArgs} args - Arguments to create many TestRecords.
     * @example
     * // Create many TestRecords
     * const testRecord = await prisma.testRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestRecordCreateManyArgs>(args?: SelectSubset<T, TestRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestRecord.
     * @param {TestRecordDeleteArgs} args - Arguments to delete one TestRecord.
     * @example
     * // Delete one TestRecord
     * const TestRecord = await prisma.testRecord.delete({
     *   where: {
     *     // ... filter to delete one TestRecord
     *   }
     * })
     * 
     */
    delete<T extends TestRecordDeleteArgs>(args: SelectSubset<T, TestRecordDeleteArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestRecord.
     * @param {TestRecordUpdateArgs} args - Arguments to update one TestRecord.
     * @example
     * // Update one TestRecord
     * const testRecord = await prisma.testRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestRecordUpdateArgs>(args: SelectSubset<T, TestRecordUpdateArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestRecords.
     * @param {TestRecordDeleteManyArgs} args - Arguments to filter TestRecords to delete.
     * @example
     * // Delete a few TestRecords
     * const { count } = await prisma.testRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestRecordDeleteManyArgs>(args?: SelectSubset<T, TestRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestRecords
     * const testRecord = await prisma.testRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestRecordUpdateManyArgs>(args: SelectSubset<T, TestRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestRecord.
     * @param {TestRecordUpsertArgs} args - Arguments to update or create a TestRecord.
     * @example
     * // Update or create a TestRecord
     * const testRecord = await prisma.testRecord.upsert({
     *   create: {
     *     // ... data to create a TestRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestRecord we want to update
     *   }
     * })
     */
    upsert<T extends TestRecordUpsertArgs>(args: SelectSubset<T, TestRecordUpsertArgs<ExtArgs>>): Prisma__TestRecordClient<$Result.GetResult<Prisma.$TestRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordCountArgs} args - Arguments to filter TestRecords to count.
     * @example
     * // Count the number of TestRecords
     * const count = await prisma.testRecord.count({
     *   where: {
     *     // ... the filter for the TestRecords we want to count
     *   }
     * })
    **/
    count<T extends TestRecordCountArgs>(
      args?: Subset<T, TestRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestRecordAggregateArgs>(args: Subset<T, TestRecordAggregateArgs>): Prisma.PrismaPromise<GetTestRecordAggregateType<T>>

    /**
     * Group by TestRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestRecordGroupByArgs['orderBy'] }
        : { orderBy?: TestRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestRecord model
   */
  readonly fields: TestRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestRecord model
   */
  interface TestRecordFieldRefs {
    readonly attempt_id: FieldRef<"TestRecord", 'Int'>
    readonly user_id: FieldRef<"TestRecord", 'Int'>
    readonly question_id: FieldRef<"TestRecord", 'Int'>
    readonly selected_option: FieldRef<"TestRecord", 'String'>
    readonly correct: FieldRef<"TestRecord", 'Boolean'>
    readonly time_taken: FieldRef<"TestRecord", 'Int'>
    readonly test_date: FieldRef<"TestRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestRecord findUnique
   */
  export type TestRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter, which TestRecord to fetch.
     */
    where: TestRecordWhereUniqueInput
  }

  /**
   * TestRecord findUniqueOrThrow
   */
  export type TestRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter, which TestRecord to fetch.
     */
    where: TestRecordWhereUniqueInput
  }

  /**
   * TestRecord findFirst
   */
  export type TestRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter, which TestRecord to fetch.
     */
    where?: TestRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestRecords to fetch.
     */
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestRecords.
     */
    cursor?: TestRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestRecords.
     */
    distinct?: TestRecordScalarFieldEnum | TestRecordScalarFieldEnum[]
  }

  /**
   * TestRecord findFirstOrThrow
   */
  export type TestRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter, which TestRecord to fetch.
     */
    where?: TestRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestRecords to fetch.
     */
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestRecords.
     */
    cursor?: TestRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestRecords.
     */
    distinct?: TestRecordScalarFieldEnum | TestRecordScalarFieldEnum[]
  }

  /**
   * TestRecord findMany
   */
  export type TestRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter, which TestRecords to fetch.
     */
    where?: TestRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestRecords to fetch.
     */
    orderBy?: TestRecordOrderByWithRelationInput | TestRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestRecords.
     */
    cursor?: TestRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestRecords.
     */
    skip?: number
    distinct?: TestRecordScalarFieldEnum | TestRecordScalarFieldEnum[]
  }

  /**
   * TestRecord create
   */
  export type TestRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a TestRecord.
     */
    data: XOR<TestRecordCreateInput, TestRecordUncheckedCreateInput>
  }

  /**
   * TestRecord createMany
   */
  export type TestRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestRecords.
     */
    data: TestRecordCreateManyInput | TestRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestRecord update
   */
  export type TestRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a TestRecord.
     */
    data: XOR<TestRecordUpdateInput, TestRecordUncheckedUpdateInput>
    /**
     * Choose, which TestRecord to update.
     */
    where: TestRecordWhereUniqueInput
  }

  /**
   * TestRecord updateMany
   */
  export type TestRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestRecords.
     */
    data: XOR<TestRecordUpdateManyMutationInput, TestRecordUncheckedUpdateManyInput>
    /**
     * Filter which TestRecords to update
     */
    where?: TestRecordWhereInput
    /**
     * Limit how many TestRecords to update.
     */
    limit?: number
  }

  /**
   * TestRecord upsert
   */
  export type TestRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the TestRecord to update in case it exists.
     */
    where: TestRecordWhereUniqueInput
    /**
     * In case the TestRecord found by the `where` argument doesn't exist, create a new TestRecord with this data.
     */
    create: XOR<TestRecordCreateInput, TestRecordUncheckedCreateInput>
    /**
     * In case the TestRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestRecordUpdateInput, TestRecordUncheckedUpdateInput>
  }

  /**
   * TestRecord delete
   */
  export type TestRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
    /**
     * Filter which TestRecord to delete.
     */
    where: TestRecordWhereUniqueInput
  }

  /**
   * TestRecord deleteMany
   */
  export type TestRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestRecords to delete
     */
    where?: TestRecordWhereInput
    /**
     * Limit how many TestRecords to delete.
     */
    limit?: number
  }

  /**
   * TestRecord without action
   */
  export type TestRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestRecord
     */
    select?: TestRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestRecord
     */
    omit?: TestRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestRecordInclude<ExtArgs> | null
  }


  /**
   * Model PerformanceAnalysis
   */

  export type AggregatePerformanceAnalysis = {
    _count: PerformanceAnalysisCountAggregateOutputType | null
    _avg: PerformanceAnalysisAvgAggregateOutputType | null
    _sum: PerformanceAnalysisSumAggregateOutputType | null
    _min: PerformanceAnalysisMinAggregateOutputType | null
    _max: PerformanceAnalysisMaxAggregateOutputType | null
  }

  export type PerformanceAnalysisAvgAggregateOutputType = {
    user_id: number | null
    total_tests: number | null
    avg_score: number | null
  }

  export type PerformanceAnalysisSumAggregateOutputType = {
    user_id: number | null
    total_tests: number | null
    avg_score: number | null
  }

  export type PerformanceAnalysisMinAggregateOutputType = {
    user_id: number | null
    total_tests: number | null
    avg_score: number | null
    weak_topics: string | null
    strength_topics: string | null
    last_attempt: Date | null
  }

  export type PerformanceAnalysisMaxAggregateOutputType = {
    user_id: number | null
    total_tests: number | null
    avg_score: number | null
    weak_topics: string | null
    strength_topics: string | null
    last_attempt: Date | null
  }

  export type PerformanceAnalysisCountAggregateOutputType = {
    user_id: number
    total_tests: number
    avg_score: number
    weak_topics: number
    strength_topics: number
    last_attempt: number
    _all: number
  }


  export type PerformanceAnalysisAvgAggregateInputType = {
    user_id?: true
    total_tests?: true
    avg_score?: true
  }

  export type PerformanceAnalysisSumAggregateInputType = {
    user_id?: true
    total_tests?: true
    avg_score?: true
  }

  export type PerformanceAnalysisMinAggregateInputType = {
    user_id?: true
    total_tests?: true
    avg_score?: true
    weak_topics?: true
    strength_topics?: true
    last_attempt?: true
  }

  export type PerformanceAnalysisMaxAggregateInputType = {
    user_id?: true
    total_tests?: true
    avg_score?: true
    weak_topics?: true
    strength_topics?: true
    last_attempt?: true
  }

  export type PerformanceAnalysisCountAggregateInputType = {
    user_id?: true
    total_tests?: true
    avg_score?: true
    weak_topics?: true
    strength_topics?: true
    last_attempt?: true
    _all?: true
  }

  export type PerformanceAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceAnalysis to aggregate.
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceAnalyses to fetch.
     */
    orderBy?: PerformanceAnalysisOrderByWithRelationInput | PerformanceAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformanceAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformanceAnalyses
    **/
    _count?: true | PerformanceAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformanceAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformanceAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformanceAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformanceAnalysisMaxAggregateInputType
  }

  export type GetPerformanceAnalysisAggregateType<T extends PerformanceAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformanceAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformanceAnalysis[P]>
      : GetScalarType<T[P], AggregatePerformanceAnalysis[P]>
  }




  export type PerformanceAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformanceAnalysisWhereInput
    orderBy?: PerformanceAnalysisOrderByWithAggregationInput | PerformanceAnalysisOrderByWithAggregationInput[]
    by: PerformanceAnalysisScalarFieldEnum[] | PerformanceAnalysisScalarFieldEnum
    having?: PerformanceAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformanceAnalysisCountAggregateInputType | true
    _avg?: PerformanceAnalysisAvgAggregateInputType
    _sum?: PerformanceAnalysisSumAggregateInputType
    _min?: PerformanceAnalysisMinAggregateInputType
    _max?: PerformanceAnalysisMaxAggregateInputType
  }

  export type PerformanceAnalysisGroupByOutputType = {
    user_id: number
    total_tests: number
    avg_score: number
    weak_topics: string | null
    strength_topics: string | null
    last_attempt: Date | null
    _count: PerformanceAnalysisCountAggregateOutputType | null
    _avg: PerformanceAnalysisAvgAggregateOutputType | null
    _sum: PerformanceAnalysisSumAggregateOutputType | null
    _min: PerformanceAnalysisMinAggregateOutputType | null
    _max: PerformanceAnalysisMaxAggregateOutputType | null
  }

  type GetPerformanceAnalysisGroupByPayload<T extends PerformanceAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformanceAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformanceAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformanceAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], PerformanceAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type PerformanceAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    total_tests?: boolean
    avg_score?: boolean
    weak_topics?: boolean
    strength_topics?: boolean
    last_attempt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performanceAnalysis"]>



  export type PerformanceAnalysisSelectScalar = {
    user_id?: boolean
    total_tests?: boolean
    avg_score?: boolean
    weak_topics?: boolean
    strength_topics?: boolean
    last_attempt?: boolean
  }

  export type PerformanceAnalysisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "total_tests" | "avg_score" | "weak_topics" | "strength_topics" | "last_attempt", ExtArgs["result"]["performanceAnalysis"]>
  export type PerformanceAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PerformanceAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformanceAnalysis"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      total_tests: number
      avg_score: number
      weak_topics: string | null
      strength_topics: string | null
      last_attempt: Date | null
    }, ExtArgs["result"]["performanceAnalysis"]>
    composites: {}
  }

  type PerformanceAnalysisGetPayload<S extends boolean | null | undefined | PerformanceAnalysisDefaultArgs> = $Result.GetResult<Prisma.$PerformanceAnalysisPayload, S>

  type PerformanceAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PerformanceAnalysisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PerformanceAnalysisCountAggregateInputType | true
    }

  export interface PerformanceAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformanceAnalysis'], meta: { name: 'PerformanceAnalysis' } }
    /**
     * Find zero or one PerformanceAnalysis that matches the filter.
     * @param {PerformanceAnalysisFindUniqueArgs} args - Arguments to find a PerformanceAnalysis
     * @example
     * // Get one PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformanceAnalysisFindUniqueArgs>(args: SelectSubset<T, PerformanceAnalysisFindUniqueArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PerformanceAnalysis that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PerformanceAnalysisFindUniqueOrThrowArgs} args - Arguments to find a PerformanceAnalysis
     * @example
     * // Get one PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformanceAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformanceAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisFindFirstArgs} args - Arguments to find a PerformanceAnalysis
     * @example
     * // Get one PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformanceAnalysisFindFirstArgs>(args?: SelectSubset<T, PerformanceAnalysisFindFirstArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PerformanceAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisFindFirstOrThrowArgs} args - Arguments to find a PerformanceAnalysis
     * @example
     * // Get one PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformanceAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformanceAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PerformanceAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformanceAnalyses
     * const performanceAnalyses = await prisma.performanceAnalysis.findMany()
     * 
     * // Get first 10 PerformanceAnalyses
     * const performanceAnalyses = await prisma.performanceAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const performanceAnalysisWithUser_idOnly = await prisma.performanceAnalysis.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends PerformanceAnalysisFindManyArgs>(args?: SelectSubset<T, PerformanceAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PerformanceAnalysis.
     * @param {PerformanceAnalysisCreateArgs} args - Arguments to create a PerformanceAnalysis.
     * @example
     * // Create one PerformanceAnalysis
     * const PerformanceAnalysis = await prisma.performanceAnalysis.create({
     *   data: {
     *     // ... data to create a PerformanceAnalysis
     *   }
     * })
     * 
     */
    create<T extends PerformanceAnalysisCreateArgs>(args: SelectSubset<T, PerformanceAnalysisCreateArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PerformanceAnalyses.
     * @param {PerformanceAnalysisCreateManyArgs} args - Arguments to create many PerformanceAnalyses.
     * @example
     * // Create many PerformanceAnalyses
     * const performanceAnalysis = await prisma.performanceAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformanceAnalysisCreateManyArgs>(args?: SelectSubset<T, PerformanceAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PerformanceAnalysis.
     * @param {PerformanceAnalysisDeleteArgs} args - Arguments to delete one PerformanceAnalysis.
     * @example
     * // Delete one PerformanceAnalysis
     * const PerformanceAnalysis = await prisma.performanceAnalysis.delete({
     *   where: {
     *     // ... filter to delete one PerformanceAnalysis
     *   }
     * })
     * 
     */
    delete<T extends PerformanceAnalysisDeleteArgs>(args: SelectSubset<T, PerformanceAnalysisDeleteArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PerformanceAnalysis.
     * @param {PerformanceAnalysisUpdateArgs} args - Arguments to update one PerformanceAnalysis.
     * @example
     * // Update one PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformanceAnalysisUpdateArgs>(args: SelectSubset<T, PerformanceAnalysisUpdateArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PerformanceAnalyses.
     * @param {PerformanceAnalysisDeleteManyArgs} args - Arguments to filter PerformanceAnalyses to delete.
     * @example
     * // Delete a few PerformanceAnalyses
     * const { count } = await prisma.performanceAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformanceAnalysisDeleteManyArgs>(args?: SelectSubset<T, PerformanceAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformanceAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformanceAnalyses
     * const performanceAnalysis = await prisma.performanceAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformanceAnalysisUpdateManyArgs>(args: SelectSubset<T, PerformanceAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PerformanceAnalysis.
     * @param {PerformanceAnalysisUpsertArgs} args - Arguments to update or create a PerformanceAnalysis.
     * @example
     * // Update or create a PerformanceAnalysis
     * const performanceAnalysis = await prisma.performanceAnalysis.upsert({
     *   create: {
     *     // ... data to create a PerformanceAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformanceAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends PerformanceAnalysisUpsertArgs>(args: SelectSubset<T, PerformanceAnalysisUpsertArgs<ExtArgs>>): Prisma__PerformanceAnalysisClient<$Result.GetResult<Prisma.$PerformanceAnalysisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PerformanceAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisCountArgs} args - Arguments to filter PerformanceAnalyses to count.
     * @example
     * // Count the number of PerformanceAnalyses
     * const count = await prisma.performanceAnalysis.count({
     *   where: {
     *     // ... the filter for the PerformanceAnalyses we want to count
     *   }
     * })
    **/
    count<T extends PerformanceAnalysisCountArgs>(
      args?: Subset<T, PerformanceAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformanceAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformanceAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformanceAnalysisAggregateArgs>(args: Subset<T, PerformanceAnalysisAggregateArgs>): Prisma.PrismaPromise<GetPerformanceAnalysisAggregateType<T>>

    /**
     * Group by PerformanceAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformanceAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformanceAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformanceAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: PerformanceAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformanceAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformanceAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformanceAnalysis model
   */
  readonly fields: PerformanceAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformanceAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformanceAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformanceAnalysis model
   */
  interface PerformanceAnalysisFieldRefs {
    readonly user_id: FieldRef<"PerformanceAnalysis", 'Int'>
    readonly total_tests: FieldRef<"PerformanceAnalysis", 'Int'>
    readonly avg_score: FieldRef<"PerformanceAnalysis", 'Float'>
    readonly weak_topics: FieldRef<"PerformanceAnalysis", 'String'>
    readonly strength_topics: FieldRef<"PerformanceAnalysis", 'String'>
    readonly last_attempt: FieldRef<"PerformanceAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PerformanceAnalysis findUnique
   */
  export type PerformanceAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceAnalysis to fetch.
     */
    where: PerformanceAnalysisWhereUniqueInput
  }

  /**
   * PerformanceAnalysis findUniqueOrThrow
   */
  export type PerformanceAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceAnalysis to fetch.
     */
    where: PerformanceAnalysisWhereUniqueInput
  }

  /**
   * PerformanceAnalysis findFirst
   */
  export type PerformanceAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceAnalysis to fetch.
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceAnalyses to fetch.
     */
    orderBy?: PerformanceAnalysisOrderByWithRelationInput | PerformanceAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceAnalyses.
     */
    cursor?: PerformanceAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceAnalyses.
     */
    distinct?: PerformanceAnalysisScalarFieldEnum | PerformanceAnalysisScalarFieldEnum[]
  }

  /**
   * PerformanceAnalysis findFirstOrThrow
   */
  export type PerformanceAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceAnalysis to fetch.
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceAnalyses to fetch.
     */
    orderBy?: PerformanceAnalysisOrderByWithRelationInput | PerformanceAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformanceAnalyses.
     */
    cursor?: PerformanceAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformanceAnalyses.
     */
    distinct?: PerformanceAnalysisScalarFieldEnum | PerformanceAnalysisScalarFieldEnum[]
  }

  /**
   * PerformanceAnalysis findMany
   */
  export type PerformanceAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which PerformanceAnalyses to fetch.
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformanceAnalyses to fetch.
     */
    orderBy?: PerformanceAnalysisOrderByWithRelationInput | PerformanceAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformanceAnalyses.
     */
    cursor?: PerformanceAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformanceAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformanceAnalyses.
     */
    skip?: number
    distinct?: PerformanceAnalysisScalarFieldEnum | PerformanceAnalysisScalarFieldEnum[]
  }

  /**
   * PerformanceAnalysis create
   */
  export type PerformanceAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformanceAnalysis.
     */
    data: XOR<PerformanceAnalysisCreateInput, PerformanceAnalysisUncheckedCreateInput>
  }

  /**
   * PerformanceAnalysis createMany
   */
  export type PerformanceAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformanceAnalyses.
     */
    data: PerformanceAnalysisCreateManyInput | PerformanceAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PerformanceAnalysis update
   */
  export type PerformanceAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformanceAnalysis.
     */
    data: XOR<PerformanceAnalysisUpdateInput, PerformanceAnalysisUncheckedUpdateInput>
    /**
     * Choose, which PerformanceAnalysis to update.
     */
    where: PerformanceAnalysisWhereUniqueInput
  }

  /**
   * PerformanceAnalysis updateMany
   */
  export type PerformanceAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformanceAnalyses.
     */
    data: XOR<PerformanceAnalysisUpdateManyMutationInput, PerformanceAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which PerformanceAnalyses to update
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * Limit how many PerformanceAnalyses to update.
     */
    limit?: number
  }

  /**
   * PerformanceAnalysis upsert
   */
  export type PerformanceAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformanceAnalysis to update in case it exists.
     */
    where: PerformanceAnalysisWhereUniqueInput
    /**
     * In case the PerformanceAnalysis found by the `where` argument doesn't exist, create a new PerformanceAnalysis with this data.
     */
    create: XOR<PerformanceAnalysisCreateInput, PerformanceAnalysisUncheckedCreateInput>
    /**
     * In case the PerformanceAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformanceAnalysisUpdateInput, PerformanceAnalysisUncheckedUpdateInput>
  }

  /**
   * PerformanceAnalysis delete
   */
  export type PerformanceAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
    /**
     * Filter which PerformanceAnalysis to delete.
     */
    where: PerformanceAnalysisWhereUniqueInput
  }

  /**
   * PerformanceAnalysis deleteMany
   */
  export type PerformanceAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformanceAnalyses to delete
     */
    where?: PerformanceAnalysisWhereInput
    /**
     * Limit how many PerformanceAnalyses to delete.
     */
    limit?: number
  }

  /**
   * PerformanceAnalysis without action
   */
  export type PerformanceAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformanceAnalysis
     */
    select?: PerformanceAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PerformanceAnalysis
     */
    omit?: PerformanceAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformanceAnalysisInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    image: 'image',
    provider: 'provider',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    question_id: 'question_id',
    subject: 'subject',
    topic: 'topic',
    difficulty: 'difficulty',
    question_text: 'question_text',
    correct_option: 'correct_option',
    option_1: 'option_1',
    option_2: 'option_2',
    option_3: 'option_3',
    option_4: 'option_4'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const TestRecordScalarFieldEnum: {
    attempt_id: 'attempt_id',
    user_id: 'user_id',
    question_id: 'question_id',
    selected_option: 'selected_option',
    correct: 'correct',
    time_taken: 'time_taken',
    test_date: 'test_date'
  };

  export type TestRecordScalarFieldEnum = (typeof TestRecordScalarFieldEnum)[keyof typeof TestRecordScalarFieldEnum]


  export const PerformanceAnalysisScalarFieldEnum: {
    user_id: 'user_id',
    total_tests: 'total_tests',
    avg_score: 'avg_score',
    weak_topics: 'weak_topics',
    strength_topics: 'strength_topics',
    last_attempt: 'last_attempt'
  };

  export type PerformanceAnalysisScalarFieldEnum = (typeof PerformanceAnalysisScalarFieldEnum)[keyof typeof PerformanceAnalysisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    image: 'image',
    provider: 'provider'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const QuestionOrderByRelevanceFieldEnum: {
    subject: 'subject',
    topic: 'topic',
    question_text: 'question_text',
    correct_option: 'correct_option',
    option_1: 'option_1',
    option_2: 'option_2',
    option_3: 'option_3',
    option_4: 'option_4'
  };

  export type QuestionOrderByRelevanceFieldEnum = (typeof QuestionOrderByRelevanceFieldEnum)[keyof typeof QuestionOrderByRelevanceFieldEnum]


  export const TestRecordOrderByRelevanceFieldEnum: {
    selected_option: 'selected_option'
  };

  export type TestRecordOrderByRelevanceFieldEnum = (typeof TestRecordOrderByRelevanceFieldEnum)[keyof typeof TestRecordOrderByRelevanceFieldEnum]


  export const PerformanceAnalysisOrderByRelevanceFieldEnum: {
    weak_topics: 'weak_topics',
    strength_topics: 'strength_topics'
  };

  export type PerformanceAnalysisOrderByRelevanceFieldEnum = (typeof PerformanceAnalysisOrderByRelevanceFieldEnum)[keyof typeof PerformanceAnalysisOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password_hash?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    testRecords?: TestRecordListRelationFilter
    performanceAnalysis?: XOR<PerformanceAnalysisNullableScalarRelationFilter, PerformanceAnalysisWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password_hash?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    testRecords?: TestRecordOrderByRelationAggregateInput
    performanceAnalysis?: PerformanceAnalysisOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password_hash?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    provider?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    testRecords?: TestRecordListRelationFilter
    performanceAnalysis?: XOR<PerformanceAnalysisNullableScalarRelationFilter, PerformanceAnalysisWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password_hash?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    question_id?: IntFilter<"Question"> | number
    subject?: StringFilter<"Question"> | string
    topic?: StringFilter<"Question"> | string
    difficulty?: EnumDifficultyFilter<"Question"> | $Enums.Difficulty
    question_text?: StringFilter<"Question"> | string
    correct_option?: StringFilter<"Question"> | string
    option_1?: StringFilter<"Question"> | string
    option_2?: StringFilter<"Question"> | string
    option_3?: StringFilter<"Question"> | string
    option_4?: StringFilter<"Question"> | string
    testRecords?: TestRecordListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    question_id?: SortOrder
    subject?: SortOrder
    topic?: SortOrder
    difficulty?: SortOrder
    question_text?: SortOrder
    correct_option?: SortOrder
    option_1?: SortOrder
    option_2?: SortOrder
    option_3?: SortOrder
    option_4?: SortOrder
    testRecords?: TestRecordOrderByRelationAggregateInput
    _relevance?: QuestionOrderByRelevanceInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    question_id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    subject?: StringFilter<"Question"> | string
    topic?: StringFilter<"Question"> | string
    difficulty?: EnumDifficultyFilter<"Question"> | $Enums.Difficulty
    question_text?: StringFilter<"Question"> | string
    correct_option?: StringFilter<"Question"> | string
    option_1?: StringFilter<"Question"> | string
    option_2?: StringFilter<"Question"> | string
    option_3?: StringFilter<"Question"> | string
    option_4?: StringFilter<"Question"> | string
    testRecords?: TestRecordListRelationFilter
  }, "question_id">

  export type QuestionOrderByWithAggregationInput = {
    question_id?: SortOrder
    subject?: SortOrder
    topic?: SortOrder
    difficulty?: SortOrder
    question_text?: SortOrder
    correct_option?: SortOrder
    option_1?: SortOrder
    option_2?: SortOrder
    option_3?: SortOrder
    option_4?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    question_id?: IntWithAggregatesFilter<"Question"> | number
    subject?: StringWithAggregatesFilter<"Question"> | string
    topic?: StringWithAggregatesFilter<"Question"> | string
    difficulty?: EnumDifficultyWithAggregatesFilter<"Question"> | $Enums.Difficulty
    question_text?: StringWithAggregatesFilter<"Question"> | string
    correct_option?: StringWithAggregatesFilter<"Question"> | string
    option_1?: StringWithAggregatesFilter<"Question"> | string
    option_2?: StringWithAggregatesFilter<"Question"> | string
    option_3?: StringWithAggregatesFilter<"Question"> | string
    option_4?: StringWithAggregatesFilter<"Question"> | string
  }

  export type TestRecordWhereInput = {
    AND?: TestRecordWhereInput | TestRecordWhereInput[]
    OR?: TestRecordWhereInput[]
    NOT?: TestRecordWhereInput | TestRecordWhereInput[]
    attempt_id?: IntFilter<"TestRecord"> | number
    user_id?: IntFilter<"TestRecord"> | number
    question_id?: IntFilter<"TestRecord"> | number
    selected_option?: StringFilter<"TestRecord"> | string
    correct?: BoolFilter<"TestRecord"> | boolean
    time_taken?: IntFilter<"TestRecord"> | number
    test_date?: DateTimeFilter<"TestRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type TestRecordOrderByWithRelationInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_option?: SortOrder
    correct?: SortOrder
    time_taken?: SortOrder
    test_date?: SortOrder
    user?: UserOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    _relevance?: TestRecordOrderByRelevanceInput
  }

  export type TestRecordWhereUniqueInput = Prisma.AtLeast<{
    attempt_id?: number
    AND?: TestRecordWhereInput | TestRecordWhereInput[]
    OR?: TestRecordWhereInput[]
    NOT?: TestRecordWhereInput | TestRecordWhereInput[]
    user_id?: IntFilter<"TestRecord"> | number
    question_id?: IntFilter<"TestRecord"> | number
    selected_option?: StringFilter<"TestRecord"> | string
    correct?: BoolFilter<"TestRecord"> | boolean
    time_taken?: IntFilter<"TestRecord"> | number
    test_date?: DateTimeFilter<"TestRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "attempt_id">

  export type TestRecordOrderByWithAggregationInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_option?: SortOrder
    correct?: SortOrder
    time_taken?: SortOrder
    test_date?: SortOrder
    _count?: TestRecordCountOrderByAggregateInput
    _avg?: TestRecordAvgOrderByAggregateInput
    _max?: TestRecordMaxOrderByAggregateInput
    _min?: TestRecordMinOrderByAggregateInput
    _sum?: TestRecordSumOrderByAggregateInput
  }

  export type TestRecordScalarWhereWithAggregatesInput = {
    AND?: TestRecordScalarWhereWithAggregatesInput | TestRecordScalarWhereWithAggregatesInput[]
    OR?: TestRecordScalarWhereWithAggregatesInput[]
    NOT?: TestRecordScalarWhereWithAggregatesInput | TestRecordScalarWhereWithAggregatesInput[]
    attempt_id?: IntWithAggregatesFilter<"TestRecord"> | number
    user_id?: IntWithAggregatesFilter<"TestRecord"> | number
    question_id?: IntWithAggregatesFilter<"TestRecord"> | number
    selected_option?: StringWithAggregatesFilter<"TestRecord"> | string
    correct?: BoolWithAggregatesFilter<"TestRecord"> | boolean
    time_taken?: IntWithAggregatesFilter<"TestRecord"> | number
    test_date?: DateTimeWithAggregatesFilter<"TestRecord"> | Date | string
  }

  export type PerformanceAnalysisWhereInput = {
    AND?: PerformanceAnalysisWhereInput | PerformanceAnalysisWhereInput[]
    OR?: PerformanceAnalysisWhereInput[]
    NOT?: PerformanceAnalysisWhereInput | PerformanceAnalysisWhereInput[]
    user_id?: IntFilter<"PerformanceAnalysis"> | number
    total_tests?: IntFilter<"PerformanceAnalysis"> | number
    avg_score?: FloatFilter<"PerformanceAnalysis"> | number
    weak_topics?: StringNullableFilter<"PerformanceAnalysis"> | string | null
    strength_topics?: StringNullableFilter<"PerformanceAnalysis"> | string | null
    last_attempt?: DateTimeNullableFilter<"PerformanceAnalysis"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PerformanceAnalysisOrderByWithRelationInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
    weak_topics?: SortOrderInput | SortOrder
    strength_topics?: SortOrderInput | SortOrder
    last_attempt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: PerformanceAnalysisOrderByRelevanceInput
  }

  export type PerformanceAnalysisWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    AND?: PerformanceAnalysisWhereInput | PerformanceAnalysisWhereInput[]
    OR?: PerformanceAnalysisWhereInput[]
    NOT?: PerformanceAnalysisWhereInput | PerformanceAnalysisWhereInput[]
    total_tests?: IntFilter<"PerformanceAnalysis"> | number
    avg_score?: FloatFilter<"PerformanceAnalysis"> | number
    weak_topics?: StringNullableFilter<"PerformanceAnalysis"> | string | null
    strength_topics?: StringNullableFilter<"PerformanceAnalysis"> | string | null
    last_attempt?: DateTimeNullableFilter<"PerformanceAnalysis"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "user_id">

  export type PerformanceAnalysisOrderByWithAggregationInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
    weak_topics?: SortOrderInput | SortOrder
    strength_topics?: SortOrderInput | SortOrder
    last_attempt?: SortOrderInput | SortOrder
    _count?: PerformanceAnalysisCountOrderByAggregateInput
    _avg?: PerformanceAnalysisAvgOrderByAggregateInput
    _max?: PerformanceAnalysisMaxOrderByAggregateInput
    _min?: PerformanceAnalysisMinOrderByAggregateInput
    _sum?: PerformanceAnalysisSumOrderByAggregateInput
  }

  export type PerformanceAnalysisScalarWhereWithAggregatesInput = {
    AND?: PerformanceAnalysisScalarWhereWithAggregatesInput | PerformanceAnalysisScalarWhereWithAggregatesInput[]
    OR?: PerformanceAnalysisScalarWhereWithAggregatesInput[]
    NOT?: PerformanceAnalysisScalarWhereWithAggregatesInput | PerformanceAnalysisScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"PerformanceAnalysis"> | number
    total_tests?: IntWithAggregatesFilter<"PerformanceAnalysis"> | number
    avg_score?: FloatWithAggregatesFilter<"PerformanceAnalysis"> | number
    weak_topics?: StringNullableWithAggregatesFilter<"PerformanceAnalysis"> | string | null
    strength_topics?: StringNullableWithAggregatesFilter<"PerformanceAnalysis"> | string | null
    last_attempt?: DateTimeNullableWithAggregatesFilter<"PerformanceAnalysis"> | Date | string | null
  }

  export type UserCreateInput = {
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    testRecords?: TestRecordCreateNestedManyWithoutUserInput
    performanceAnalysis?: PerformanceAnalysisCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    testRecords?: TestRecordUncheckedCreateNestedManyWithoutUserInput
    performanceAnalysis?: PerformanceAnalysisUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testRecords?: TestRecordUpdateManyWithoutUserNestedInput
    performanceAnalysis?: PerformanceAnalysisUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testRecords?: TestRecordUncheckedUpdateManyWithoutUserNestedInput
    performanceAnalysis?: PerformanceAnalysisUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
    testRecords?: TestRecordCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    question_id?: number
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
    testRecords?: TestRecordUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
    testRecords?: TestRecordUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    question_id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
    testRecords?: TestRecordUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    question_id?: number
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
  }

  export type QuestionUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    question_id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
  }

  export type TestRecordCreateInput = {
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
    user: UserCreateNestedOneWithoutTestRecordsInput
    question: QuestionCreateNestedOneWithoutTestRecordsInput
  }

  export type TestRecordUncheckedCreateInput = {
    attempt_id?: number
    user_id: number
    question_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordUpdateInput = {
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTestRecordsNestedInput
    question?: QuestionUpdateOneRequiredWithoutTestRecordsNestedInput
  }

  export type TestRecordUncheckedUpdateInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestRecordCreateManyInput = {
    attempt_id?: number
    user_id: number
    question_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordUpdateManyMutationInput = {
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestRecordUncheckedUpdateManyInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformanceAnalysisCreateInput = {
    total_tests?: number
    avg_score?: number
    weak_topics?: string | null
    strength_topics?: string | null
    last_attempt?: Date | string | null
    user: UserCreateNestedOneWithoutPerformanceAnalysisInput
  }

  export type PerformanceAnalysisUncheckedCreateInput = {
    user_id: number
    total_tests?: number
    avg_score?: number
    weak_topics?: string | null
    strength_topics?: string | null
    last_attempt?: Date | string | null
  }

  export type PerformanceAnalysisUpdateInput = {
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPerformanceAnalysisNestedInput
  }

  export type PerformanceAnalysisUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PerformanceAnalysisCreateManyInput = {
    user_id: number
    total_tests?: number
    avg_score?: number
    weak_topics?: string | null
    strength_topics?: string | null
    last_attempt?: Date | string | null
  }

  export type PerformanceAnalysisUpdateManyMutationInput = {
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PerformanceAnalysisUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TestRecordListRelationFilter = {
    every?: TestRecordWhereInput
    some?: TestRecordWhereInput
    none?: TestRecordWhereInput
  }

  export type PerformanceAnalysisNullableScalarRelationFilter = {
    is?: PerformanceAnalysisWhereInput | null
    isNot?: PerformanceAnalysisWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TestRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    image?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    image?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    image?: SortOrder
    provider?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type QuestionOrderByRelevanceInput = {
    fields: QuestionOrderByRelevanceFieldEnum | QuestionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type QuestionCountOrderByAggregateInput = {
    question_id?: SortOrder
    subject?: SortOrder
    topic?: SortOrder
    difficulty?: SortOrder
    question_text?: SortOrder
    correct_option?: SortOrder
    option_1?: SortOrder
    option_2?: SortOrder
    option_3?: SortOrder
    option_4?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    question_id?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    question_id?: SortOrder
    subject?: SortOrder
    topic?: SortOrder
    difficulty?: SortOrder
    question_text?: SortOrder
    correct_option?: SortOrder
    option_1?: SortOrder
    option_2?: SortOrder
    option_3?: SortOrder
    option_4?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    question_id?: SortOrder
    subject?: SortOrder
    topic?: SortOrder
    difficulty?: SortOrder
    question_text?: SortOrder
    correct_option?: SortOrder
    option_1?: SortOrder
    option_2?: SortOrder
    option_3?: SortOrder
    option_4?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    question_id?: SortOrder
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type TestRecordOrderByRelevanceInput = {
    fields: TestRecordOrderByRelevanceFieldEnum | TestRecordOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TestRecordCountOrderByAggregateInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_option?: SortOrder
    correct?: SortOrder
    time_taken?: SortOrder
    test_date?: SortOrder
  }

  export type TestRecordAvgOrderByAggregateInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    time_taken?: SortOrder
  }

  export type TestRecordMaxOrderByAggregateInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_option?: SortOrder
    correct?: SortOrder
    time_taken?: SortOrder
    test_date?: SortOrder
  }

  export type TestRecordMinOrderByAggregateInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    selected_option?: SortOrder
    correct?: SortOrder
    time_taken?: SortOrder
    test_date?: SortOrder
  }

  export type TestRecordSumOrderByAggregateInput = {
    attempt_id?: SortOrder
    user_id?: SortOrder
    question_id?: SortOrder
    time_taken?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PerformanceAnalysisOrderByRelevanceInput = {
    fields: PerformanceAnalysisOrderByRelevanceFieldEnum | PerformanceAnalysisOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PerformanceAnalysisCountOrderByAggregateInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
    weak_topics?: SortOrder
    strength_topics?: SortOrder
    last_attempt?: SortOrder
  }

  export type PerformanceAnalysisAvgOrderByAggregateInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
  }

  export type PerformanceAnalysisMaxOrderByAggregateInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
    weak_topics?: SortOrder
    strength_topics?: SortOrder
    last_attempt?: SortOrder
  }

  export type PerformanceAnalysisMinOrderByAggregateInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
    weak_topics?: SortOrder
    strength_topics?: SortOrder
    last_attempt?: SortOrder
  }

  export type PerformanceAnalysisSumOrderByAggregateInput = {
    user_id?: SortOrder
    total_tests?: SortOrder
    avg_score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TestRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput> | TestRecordCreateWithoutUserInput[] | TestRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutUserInput | TestRecordCreateOrConnectWithoutUserInput[]
    createMany?: TestRecordCreateManyUserInputEnvelope
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
  }

  export type PerformanceAnalysisCreateNestedOneWithoutUserInput = {
    create?: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformanceAnalysisCreateOrConnectWithoutUserInput
    connect?: PerformanceAnalysisWhereUniqueInput
  }

  export type TestRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput> | TestRecordCreateWithoutUserInput[] | TestRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutUserInput | TestRecordCreateOrConnectWithoutUserInput[]
    createMany?: TestRecordCreateManyUserInputEnvelope
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
  }

  export type PerformanceAnalysisUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformanceAnalysisCreateOrConnectWithoutUserInput
    connect?: PerformanceAnalysisWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TestRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput> | TestRecordCreateWithoutUserInput[] | TestRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutUserInput | TestRecordCreateOrConnectWithoutUserInput[]
    upsert?: TestRecordUpsertWithWhereUniqueWithoutUserInput | TestRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestRecordCreateManyUserInputEnvelope
    set?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    disconnect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    delete?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    update?: TestRecordUpdateWithWhereUniqueWithoutUserInput | TestRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestRecordUpdateManyWithWhereWithoutUserInput | TestRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
  }

  export type PerformanceAnalysisUpdateOneWithoutUserNestedInput = {
    create?: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformanceAnalysisCreateOrConnectWithoutUserInput
    upsert?: PerformanceAnalysisUpsertWithoutUserInput
    disconnect?: PerformanceAnalysisWhereInput | boolean
    delete?: PerformanceAnalysisWhereInput | boolean
    connect?: PerformanceAnalysisWhereUniqueInput
    update?: XOR<XOR<PerformanceAnalysisUpdateToOneWithWhereWithoutUserInput, PerformanceAnalysisUpdateWithoutUserInput>, PerformanceAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput> | TestRecordCreateWithoutUserInput[] | TestRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutUserInput | TestRecordCreateOrConnectWithoutUserInput[]
    upsert?: TestRecordUpsertWithWhereUniqueWithoutUserInput | TestRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestRecordCreateManyUserInputEnvelope
    set?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    disconnect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    delete?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    update?: TestRecordUpdateWithWhereUniqueWithoutUserInput | TestRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestRecordUpdateManyWithWhereWithoutUserInput | TestRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
  }

  export type PerformanceAnalysisUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
    connectOrCreate?: PerformanceAnalysisCreateOrConnectWithoutUserInput
    upsert?: PerformanceAnalysisUpsertWithoutUserInput
    disconnect?: PerformanceAnalysisWhereInput | boolean
    delete?: PerformanceAnalysisWhereInput | boolean
    connect?: PerformanceAnalysisWhereUniqueInput
    update?: XOR<XOR<PerformanceAnalysisUpdateToOneWithWhereWithoutUserInput, PerformanceAnalysisUpdateWithoutUserInput>, PerformanceAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type TestRecordCreateNestedManyWithoutQuestionInput = {
    create?: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput> | TestRecordCreateWithoutQuestionInput[] | TestRecordUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutQuestionInput | TestRecordCreateOrConnectWithoutQuestionInput[]
    createMany?: TestRecordCreateManyQuestionInputEnvelope
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
  }

  export type TestRecordUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput> | TestRecordCreateWithoutQuestionInput[] | TestRecordUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutQuestionInput | TestRecordCreateOrConnectWithoutQuestionInput[]
    createMany?: TestRecordCreateManyQuestionInputEnvelope
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type TestRecordUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput> | TestRecordCreateWithoutQuestionInput[] | TestRecordUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutQuestionInput | TestRecordCreateOrConnectWithoutQuestionInput[]
    upsert?: TestRecordUpsertWithWhereUniqueWithoutQuestionInput | TestRecordUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: TestRecordCreateManyQuestionInputEnvelope
    set?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    disconnect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    delete?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    update?: TestRecordUpdateWithWhereUniqueWithoutQuestionInput | TestRecordUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: TestRecordUpdateManyWithWhereWithoutQuestionInput | TestRecordUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
  }

  export type TestRecordUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput> | TestRecordCreateWithoutQuestionInput[] | TestRecordUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: TestRecordCreateOrConnectWithoutQuestionInput | TestRecordCreateOrConnectWithoutQuestionInput[]
    upsert?: TestRecordUpsertWithWhereUniqueWithoutQuestionInput | TestRecordUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: TestRecordCreateManyQuestionInputEnvelope
    set?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    disconnect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    delete?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    connect?: TestRecordWhereUniqueInput | TestRecordWhereUniqueInput[]
    update?: TestRecordUpdateWithWhereUniqueWithoutQuestionInput | TestRecordUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: TestRecordUpdateManyWithWhereWithoutQuestionInput | TestRecordUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTestRecordsInput = {
    create?: XOR<UserCreateWithoutTestRecordsInput, UserUncheckedCreateWithoutTestRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutTestRecordsInput = {
    create?: XOR<QuestionCreateWithoutTestRecordsInput, QuestionUncheckedCreateWithoutTestRecordsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutTestRecordsInput
    connect?: QuestionWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutTestRecordsNestedInput = {
    create?: XOR<UserCreateWithoutTestRecordsInput, UserUncheckedCreateWithoutTestRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestRecordsInput
    upsert?: UserUpsertWithoutTestRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTestRecordsInput, UserUpdateWithoutTestRecordsInput>, UserUncheckedUpdateWithoutTestRecordsInput>
  }

  export type QuestionUpdateOneRequiredWithoutTestRecordsNestedInput = {
    create?: XOR<QuestionCreateWithoutTestRecordsInput, QuestionUncheckedCreateWithoutTestRecordsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutTestRecordsInput
    upsert?: QuestionUpsertWithoutTestRecordsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutTestRecordsInput, QuestionUpdateWithoutTestRecordsInput>, QuestionUncheckedUpdateWithoutTestRecordsInput>
  }

  export type UserCreateNestedOneWithoutPerformanceAnalysisInput = {
    create?: XOR<UserCreateWithoutPerformanceAnalysisInput, UserUncheckedCreateWithoutPerformanceAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformanceAnalysisInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutPerformanceAnalysisNestedInput = {
    create?: XOR<UserCreateWithoutPerformanceAnalysisInput, UserUncheckedCreateWithoutPerformanceAnalysisInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformanceAnalysisInput
    upsert?: UserUpsertWithoutPerformanceAnalysisInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPerformanceAnalysisInput, UserUpdateWithoutPerformanceAnalysisInput>, UserUncheckedUpdateWithoutPerformanceAnalysisInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[]
    notIn?: $Enums.Difficulty[]
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TestRecordCreateWithoutUserInput = {
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
    question: QuestionCreateNestedOneWithoutTestRecordsInput
  }

  export type TestRecordUncheckedCreateWithoutUserInput = {
    attempt_id?: number
    question_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordCreateOrConnectWithoutUserInput = {
    where: TestRecordWhereUniqueInput
    create: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput>
  }

  export type TestRecordCreateManyUserInputEnvelope = {
    data: TestRecordCreateManyUserInput | TestRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PerformanceAnalysisCreateWithoutUserInput = {
    total_tests?: number
    avg_score?: number
    weak_topics?: string | null
    strength_topics?: string | null
    last_attempt?: Date | string | null
  }

  export type PerformanceAnalysisUncheckedCreateWithoutUserInput = {
    total_tests?: number
    avg_score?: number
    weak_topics?: string | null
    strength_topics?: string | null
    last_attempt?: Date | string | null
  }

  export type PerformanceAnalysisCreateOrConnectWithoutUserInput = {
    where: PerformanceAnalysisWhereUniqueInput
    create: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
  }

  export type TestRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: TestRecordWhereUniqueInput
    update: XOR<TestRecordUpdateWithoutUserInput, TestRecordUncheckedUpdateWithoutUserInput>
    create: XOR<TestRecordCreateWithoutUserInput, TestRecordUncheckedCreateWithoutUserInput>
  }

  export type TestRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: TestRecordWhereUniqueInput
    data: XOR<TestRecordUpdateWithoutUserInput, TestRecordUncheckedUpdateWithoutUserInput>
  }

  export type TestRecordUpdateManyWithWhereWithoutUserInput = {
    where: TestRecordScalarWhereInput
    data: XOR<TestRecordUpdateManyMutationInput, TestRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type TestRecordScalarWhereInput = {
    AND?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
    OR?: TestRecordScalarWhereInput[]
    NOT?: TestRecordScalarWhereInput | TestRecordScalarWhereInput[]
    attempt_id?: IntFilter<"TestRecord"> | number
    user_id?: IntFilter<"TestRecord"> | number
    question_id?: IntFilter<"TestRecord"> | number
    selected_option?: StringFilter<"TestRecord"> | string
    correct?: BoolFilter<"TestRecord"> | boolean
    time_taken?: IntFilter<"TestRecord"> | number
    test_date?: DateTimeFilter<"TestRecord"> | Date | string
  }

  export type PerformanceAnalysisUpsertWithoutUserInput = {
    update: XOR<PerformanceAnalysisUpdateWithoutUserInput, PerformanceAnalysisUncheckedUpdateWithoutUserInput>
    create: XOR<PerformanceAnalysisCreateWithoutUserInput, PerformanceAnalysisUncheckedCreateWithoutUserInput>
    where?: PerformanceAnalysisWhereInput
  }

  export type PerformanceAnalysisUpdateToOneWithWhereWithoutUserInput = {
    where?: PerformanceAnalysisWhereInput
    data: XOR<PerformanceAnalysisUpdateWithoutUserInput, PerformanceAnalysisUncheckedUpdateWithoutUserInput>
  }

  export type PerformanceAnalysisUpdateWithoutUserInput = {
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PerformanceAnalysisUncheckedUpdateWithoutUserInput = {
    total_tests?: IntFieldUpdateOperationsInput | number
    avg_score?: FloatFieldUpdateOperationsInput | number
    weak_topics?: NullableStringFieldUpdateOperationsInput | string | null
    strength_topics?: NullableStringFieldUpdateOperationsInput | string | null
    last_attempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestRecordCreateWithoutQuestionInput = {
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
    user: UserCreateNestedOneWithoutTestRecordsInput
  }

  export type TestRecordUncheckedCreateWithoutQuestionInput = {
    attempt_id?: number
    user_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordCreateOrConnectWithoutQuestionInput = {
    where: TestRecordWhereUniqueInput
    create: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput>
  }

  export type TestRecordCreateManyQuestionInputEnvelope = {
    data: TestRecordCreateManyQuestionInput | TestRecordCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type TestRecordUpsertWithWhereUniqueWithoutQuestionInput = {
    where: TestRecordWhereUniqueInput
    update: XOR<TestRecordUpdateWithoutQuestionInput, TestRecordUncheckedUpdateWithoutQuestionInput>
    create: XOR<TestRecordCreateWithoutQuestionInput, TestRecordUncheckedCreateWithoutQuestionInput>
  }

  export type TestRecordUpdateWithWhereUniqueWithoutQuestionInput = {
    where: TestRecordWhereUniqueInput
    data: XOR<TestRecordUpdateWithoutQuestionInput, TestRecordUncheckedUpdateWithoutQuestionInput>
  }

  export type TestRecordUpdateManyWithWhereWithoutQuestionInput = {
    where: TestRecordScalarWhereInput
    data: XOR<TestRecordUpdateManyMutationInput, TestRecordUncheckedUpdateManyWithoutQuestionInput>
  }

  export type UserCreateWithoutTestRecordsInput = {
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    performanceAnalysis?: PerformanceAnalysisCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTestRecordsInput = {
    id?: number
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    performanceAnalysis?: PerformanceAnalysisUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTestRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTestRecordsInput, UserUncheckedCreateWithoutTestRecordsInput>
  }

  export type QuestionCreateWithoutTestRecordsInput = {
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
  }

  export type QuestionUncheckedCreateWithoutTestRecordsInput = {
    question_id?: number
    subject: string
    topic: string
    difficulty: $Enums.Difficulty
    question_text: string
    correct_option: string
    option_1: string
    option_2: string
    option_3: string
    option_4: string
  }

  export type QuestionCreateOrConnectWithoutTestRecordsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTestRecordsInput, QuestionUncheckedCreateWithoutTestRecordsInput>
  }

  export type UserUpsertWithoutTestRecordsInput = {
    update: XOR<UserUpdateWithoutTestRecordsInput, UserUncheckedUpdateWithoutTestRecordsInput>
    create: XOR<UserCreateWithoutTestRecordsInput, UserUncheckedCreateWithoutTestRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTestRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTestRecordsInput, UserUncheckedUpdateWithoutTestRecordsInput>
  }

  export type UserUpdateWithoutTestRecordsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceAnalysis?: PerformanceAnalysisUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTestRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performanceAnalysis?: PerformanceAnalysisUncheckedUpdateOneWithoutUserNestedInput
  }

  export type QuestionUpsertWithoutTestRecordsInput = {
    update: XOR<QuestionUpdateWithoutTestRecordsInput, QuestionUncheckedUpdateWithoutTestRecordsInput>
    create: XOR<QuestionCreateWithoutTestRecordsInput, QuestionUncheckedCreateWithoutTestRecordsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutTestRecordsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutTestRecordsInput, QuestionUncheckedUpdateWithoutTestRecordsInput>
  }

  export type QuestionUpdateWithoutTestRecordsInput = {
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateWithoutTestRecordsInput = {
    question_id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    topic?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    question_text?: StringFieldUpdateOperationsInput | string
    correct_option?: StringFieldUpdateOperationsInput | string
    option_1?: StringFieldUpdateOperationsInput | string
    option_2?: StringFieldUpdateOperationsInput | string
    option_3?: StringFieldUpdateOperationsInput | string
    option_4?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPerformanceAnalysisInput = {
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    testRecords?: TestRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPerformanceAnalysisInput = {
    id?: number
    name?: string | null
    email: string
    password_hash?: string | null
    image?: string | null
    provider?: string | null
    createdAt?: Date | string
    testRecords?: TestRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPerformanceAnalysisInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPerformanceAnalysisInput, UserUncheckedCreateWithoutPerformanceAnalysisInput>
  }

  export type UserUpsertWithoutPerformanceAnalysisInput = {
    update: XOR<UserUpdateWithoutPerformanceAnalysisInput, UserUncheckedUpdateWithoutPerformanceAnalysisInput>
    create: XOR<UserCreateWithoutPerformanceAnalysisInput, UserUncheckedCreateWithoutPerformanceAnalysisInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPerformanceAnalysisInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPerformanceAnalysisInput, UserUncheckedUpdateWithoutPerformanceAnalysisInput>
  }

  export type UserUpdateWithoutPerformanceAnalysisInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testRecords?: TestRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPerformanceAnalysisInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testRecords?: TestRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TestRecordCreateManyUserInput = {
    attempt_id?: number
    question_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordUpdateWithoutUserInput = {
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutTestRecordsNestedInput
  }

  export type TestRecordUncheckedUpdateWithoutUserInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestRecordUncheckedUpdateManyWithoutUserInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    question_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestRecordCreateManyQuestionInput = {
    attempt_id?: number
    user_id: number
    selected_option: string
    correct: boolean
    time_taken: number
    test_date?: Date | string
  }

  export type TestRecordUpdateWithoutQuestionInput = {
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTestRecordsNestedInput
  }

  export type TestRecordUncheckedUpdateWithoutQuestionInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestRecordUncheckedUpdateManyWithoutQuestionInput = {
    attempt_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    selected_option?: StringFieldUpdateOperationsInput | string
    correct?: BoolFieldUpdateOperationsInput | boolean
    time_taken?: IntFieldUpdateOperationsInput | number
    test_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}